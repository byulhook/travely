# <타입>: <제목> (#이슈 번호) - 제목을 "<타입>: <제목> (#이슈 번호)" 형식으로 작성
# <타입>과 (#이슈 번호)는 byulFormat에 의해 자동 생성됩니다

# 변경된 "내용"을 명확히 설명 / 마침표로 끝내지 마세요
# 예시: feat: 로그인 기능 추가 (#1)

# 본문을 아래에 작성하세요

# 여러 줄을 구분할 때는 "-"를 사용하세요
# - login.tsx 파일이 수정되었습니다.

# --- 커밋 끝 ---
#   <타입> 목록
#   feat        : 기능 (새로운 기능)
#   fix         : 버그 수정 (버그 수정)
#   refactor    : 리팩토링
#   style       : 코드 스타일 (코드 서식, 공백, 주석, 세미콜론: 비즈니스 로직 변경 없음)
#   docs        : 문서 (문서 추가, 수정, 삭제, README)
#   test        : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직 변경 없음)
#   settings    : 프로젝트 설정
#   chore       : 기타 변경사항 (예: 패키지 매니저 수정, .gitignore 등)
#   init        : 초기 생성
#   rename      : 파일/폴더명 변경 또는 이동만
#   remove      : 파일 삭제만
#   design      : UI/UX 디자인 변경 (예: CSS)
#   release     : 배포 또는 릴리스 (예: release/login-123)
# ------------------
#   제목은 소문자로 시작
#   제목은 명령형으로 작성
#   제목 끝에 마침표를 넣지 마세요
#   제목과 본문 사이에 빈 줄을 남기세요
#   본문은 "어떻게"보다는 "무엇을", "왜"를 설명해야 합니다
#   본문의 여러 줄을 구분할 때는 "-"를 사용하세요
#   설정 명령어:
#   git config --local commit.template ./.github/.gitmessage.txt
# ------------------